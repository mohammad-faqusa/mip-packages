[
  {
    "name": "accelerometer",
    "library_name": "accelerometer",
    "class_name": "MPU6050",
    "attributes": {
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (random values returned)",
          "false": "Reads actual sensor data via I2C"
        },
        "purpose": "Determines whether the sensor operates in simulation or real hardware mode"
      },
      "addr": {
        "dataType": "Number",
        "format": "hex",
        "default": 104,
        "purpose": "I2C address of the MPU6050 sensor"
      },
      "_accel": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "g",
        "access": "read-only",
        "purpose": "Holds acceleration values on X, Y, Z axes"
      },
      "_gyro": {
        "dataType": "Array",
        "elementType": "Number",
        "length": 3,
        "unit": "deg/s",
        "access": "read-only",
        "purpose": "Holds gyroscope angular velocity values on X, Y, Z axes"
      }
    },
    "methods": {
      "read_accel": {
        "returns": {
          "dataType": "Array",
          "elementType": "Number",
          "length": 3,
          "unit": "g"
        },
        "purpose": "Returns a tuple of X, Y, Z acceleration values"
      },
      "read_gyro": {
        "returns": {
          "dataType": "Array",
          "elementType": "Number",
          "length": 3,
          "unit": "deg/s"
        },
        "purpose": "Returns a tuple of X, Y, Z gyroscope values"
      },
      "read_all": {
        "returns": {
          "dataType": "Object",
          "properties": {
            "accel": {
              "dataType": "Array",
              "elementType": "Number",
              "length": 3,
              "unit": "g"
            },
            "gyro": {
              "dataType": "Array",
              "elementType": "Number",
              "length": 3,
              "unit": "deg/s"
            }
          }
        },
        "purpose": "Returns both accelerometer and gyroscope readings in one call"
      }
    }
  },
  {
    "name": "dht_sensor",
    "library_name": "dht_sensor",
    "class_name": "DHTSensor",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the DHT sensor"
      },
      "sensor_type": {
        "dataType": "String",
        "default": "DHT22",
        "allowedValues": ["DHT11", "DHT22"],
        "purpose": "Specifies the type of DHT sensor being used"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (random temperature and humidity values)",
          "false": "Reads actual data from the connected sensor"
        },
        "purpose": "Controls whether the sensor operates in simulation or real mode"
      },
      "_temp": {
        "dataType": "Number",
        "unit": "°C",
        "access": "read-only",
        "range": {
          "min": -40,
          "max": 125
        },
        "default": 0,
        "purpose": "Latest measured temperature value. Valid range: -40°C to 125°C"
      },
      "_humidity": {
        "dataType": "Number",
        "unit": "%",
        "access": "read-only",
        "range": {
          "min": 0,
          "max": 100
        },
        "default": 0,
        "purpose": "Latest measured humidity value. Valid range: 0% to 100%"
      }
    },
    "methods": {
      "measure": {
        "returns": "void",
        "purpose": "Triggers the sensor to update temperature and humidity readings"
      },
      "temperature": {
        "returns": {
          "dataType": "Number",
          "unit": "°C",
          "range": {
            "min": -40,
            "max": 125
          }
        },
        "purpose": "Returns the last measured temperature value. Range: -40°C to 125°C"
      },
      "humidity": {
        "returns": {
          "dataType": "Number",
          "unit": "%",
          "range": {
            "min": 0,
            "max": 100
          }
        },
        "purpose": "Returns the last measured humidity value. Range: 0% to 100%"
      }
    }
  },
  {
    "name": "encoder",
    "library_name": "encoder",
    "class_name": "Encoder",
    "attributes": {
      "pin_a": {
        "dataType": "Number",
        "purpose": "GPIO pin A for encoder signal input"
      },
      "pin_b": {
        "dataType": "Number",
        "purpose": "GPIO pin B for encoder signal input"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (position manually controlled via code)",
          "false": "Reads real encoder signals from pins"
        },
        "purpose": "Determines whether encoder is in simulation or real hardware mode"
      },
      "_position": {
        "dataType": "Number",
        "access": "read-only",
        "range": {
          "min": null,
          "max": null
        },
        "default": 0,
        "purpose": "Current position of the encoder (increments/decrements on rotation)"
      }
    },
    "methods": {
      "get_position": {
        "returns": {
          "dataType": "Number",
          "purpose": "Returns the current position of the encoder"
        }
      },
      "reset": {
        "returns": "void",
        "purpose": "Resets the encoder position back to zero"
      },
      "simulate_step": {
        "parameters": {
          "steps": {
            "dataType": "Number",
            "purpose": "Number of steps to increment or decrement position (for simulate mode)"
          }
        },
        "returns": "void",
        "purpose": "Manually updates the encoder position during simulation mode",
        "availability": "Only available when simulate=true"
      }
    }
  },
  {
    "name": "gas_sensor",
    "library_name": "gas_sensor",
    "class_name": "GasSensor",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the Gas sensor"
      },
      "analog": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Analog mode enabled (reads a range of values from 0 to 1023)",
          "false": "Digital mode enabled (reads values 0 or 1)"
        },
        "purpose": "Specifies whether the sensor is working in analog or digital mode"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (random gas level values)",
          "false": "Reads actual data from the connected sensor"
        },
        "purpose": "Controls whether the sensor operates in simulation or real mode"
      },
      "_gas_level": {
        "dataType": "Number",
        "access": "read-only",
        "range": {
          "min": 0,
          "max": 1023
        },
        "default": 0,
        "purpose": "Latest gas level reading. Range: 0 to 1023 (for analog mode) or 0/1 (for digital mode)"
      }
    },
    "methods": {
      "read": {
        "returns": {
          "dataType": "Number",
          "range": {
            "min": 0,
            "max": 1023
          }
        },
        "purpose": "Reads the current gas level from the sensor. Range: 0 to 1023 (analog) or 0/1 (digital)"
      }
    }
  },
  {
    "name": "led",
    "library_name": "led",
    "class_name": "LED",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the LED"
      },
      "active_high": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "LED is turned ON when pin is high (1)",
          "false": "LED is turned ON when pin is low (0)"
        },
        "purpose": "Determines if the LED is active high or low"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (LED behavior simulated)",
          "false": "Controls an actual LED on the connected GPIO pin"
        },
        "purpose": "Controls whether the LED operates in simulation or real mode"
      },
      "_state": {
        "dataType": "Boolean",
        "access": "read-only",
        "default": false,
        "values_meaning": {
          "true": "LED is ON",
          "false": "LED is OFF"
        },
        "purpose": "Tracks the current state of the LED (ON/OFF)"
      }
    },
    "methods": {
      "on": {
        "returns": "void",
        "purpose": "Turns the LED ON (sets the state to ON)"
      },
      "off": {
        "returns": "void",
        "purpose": "Turns the LED OFF (sets the state to OFF)"
      },
      "toggle": {
        "returns": "void",
        "purpose": "Toggles the state of the LED (ON if OFF, OFF if ON)"
      },
      "is_on": {
        "returns": {
          "dataType": "Boolean"
        },
        "purpose": "Returns the current state of the LED (True if ON, False if OFF)"
      }
    }
  },
  {
    "name": "internal_led",
    "library_name": "internal_led",
    "class_name": "InternalLED",
    "inherited_from": "LED",
    "attributes": {
      "simulate": {
        "dataType": "Boolean",
        "default": false,
        "values_meaning": {
          "true": "Simulation mode enabled (LED behavior simulated)",
          "false": "Controls an actual internal LED on GPIO2"
        },
        "purpose": "Controls whether the internal LED operates in simulation or real mode"
      }
    },
    "methods": {
      "on": {
        "returns": "void",
        "purpose": "Turns the internal LED ON (sets the state to ON)"
      },
      "off": {
        "returns": "void",
        "purpose": "Turns the internal LED OFF (sets the state to OFF)"
      },
      "toggle": {
        "returns": "void",
        "purpose": "Toggles the state of the internal LED (ON if OFF, OFF if ON)"
      },
      "is_on": {
        "returns": {
          "dataType": "Boolean"
        },
        "purpose": "Returns the current state of the internal LED (True if ON, False if OFF)"
      }
    }
  },
  {
    "name": "motion_sensor",
    "library_name": "motion_sensor",
    "class_name": "MotionSensor",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the Motion sensor (PIR)"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (random motion detection)",
          "false": "Reads actual motion data from the connected sensor"
        },
        "purpose": "Controls whether the sensor operates in simulation or real mode"
      },
      "_motion_detected": {
        "dataType": "Boolean",
        "access": "read-only",
        "values_meaning": {
          "true": "Motion detected",
          "false": "No motion detected"
        },
        "purpose": "Indicates whether motion has been detected or not"
      }
    },
    "methods": {
      "read": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Motion detected",
            "false": "No motion detected"
          }
        },
        "purpose": "Reads the current state of the motion sensor"
      },
      "wait_for_motion": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Motion detected within timeout",
            "false": "No motion detected within timeout"
          }
        },
        "parameters": {
          "timeout": {
            "dataType": "Number",
            "default": 10,
            "unit": "seconds",
            "purpose": "Timeout duration to wait for motion detection"
          }
        },
        "purpose": "Waits for motion detection for a specified timeout period"
      }
    }
  },
  {
    "name": "push_button",
    "library_name": "push_button",
    "class_name": "PushButton",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the PushButton"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (manual control of button state)",
          "false": "Reads actual state from the physical button"
        },
        "purpose": "Controls whether the button operates in simulation or real mode"
      },
      "debounce_ms": {
        "dataType": "Number",
        "default": 50,
        "range": {
          "min": 0,
          "max": 500
        },
        "purpose": "Debounce time in milliseconds to prevent false triggering from button presses"
      },
      "_last_state": {
        "dataType": "Boolean",
        "access": "read-only",
        "purpose": "Stores the last known state of the button (True = pressed, False = released)"
      },
      "_last_time": {
        "dataType": "Number",
        "access": "read-only",
        "purpose": "Stores the last time the button state was changed (in ms)"
      },
      "_simulated_state": {
        "dataType": "Boolean",
        "access": "read-write",
        "purpose": "Used only in simulation mode to manually control the button state"
      },
      "was_pressed": {
        "dataType": "Boolean",
        "access": "read-only",
        "purpose": "Indicates whether the button was pressed (can be used to detect button press events)"
      }
    },
    "methods": {
      "set_simulated_state": {
        "parameters": {
          "pressed": {
            "dataType": "Boolean",
            "values_meaning": {
              "true": "Simulates button pressed",
              "false": "Simulates button released"
            },
            "purpose": "Sets the simulated state of the button (only used in simulation mode)"
          }
        },
        "returns": "void",
        "purpose": "Sets the simulated button state"
      },
      "is_pressed": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Button is pressed",
            "false": "Button is released"
          }
        },
        "purpose": "Checks if the button is pressed or released, applies debounce logic"
      },
      "push": {
        "returns": "void",
        "purpose": "Simulates a button press and release cycle (only for simulation mode)"
      },
      "get_event": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Button was pressed",
            "false": "No button press detected"
          }
        },
        "purpose": "Returns and clears the `was_pressed` flag indicating whether the button was pressed"
      }
    }
  },
  {
    "name": "relay",
    "library_name": "relay",
    "class_name": "Relay",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the Relay module"
      },
      "active_high": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Relay is active when set to HIGH",
          "false": "Relay is active when set to LOW"
        },
        "purpose": "Defines whether the relay is activated when the pin is HIGH or LOW"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (manual relay state control)",
          "false": "Controls actual relay hardware connected to the pin"
        },
        "purpose": "Controls whether the relay operates in simulation or real mode"
      },
      "_state": {
        "dataType": "Boolean",
        "access": "read-only",
        "default": false,
        "values_meaning": {
          "true": "Relay is ON",
          "false": "Relay is OFF"
        },
        "purpose": "Stores the current state of the relay (ON or OFF)"
      }
    },
    "methods": {
      "on": {
        "returns": "void",
        "purpose": "Turns the relay ON (sets pin to HIGH or LOW based on active_high)"
      },
      "off": {
        "returns": "void",
        "purpose": "Turns the relay OFF (sets pin to LOW or HIGH based on active_high)"
      },
      "toggle": {
        "returns": "void",
        "purpose": "Toggles the relay state between ON and OFF"
      },
      "is_on": {
        "returns": {
          "dataType": "Boolean"
        },
        "purpose": "Returns the current state of the relay (True if ON, False if OFF)"
      }
    }
  },
  {
    "name": "servo_motor",
    "library_name": "servo_motor",
    "class_name": "Servo",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the Servo motor"
      },
      "freq": {
        "dataType": "Number",
        "default": 50,
        "range": {
          "min": 1,
          "max": 1000
        },
        "unit": "Hz",
        "purpose": "Frequency for controlling the servo motor (default is 50Hz)"
      },
      "min_us": {
        "dataType": "Number",
        "default": 500,
        "range": {
          "min": 0,
          "max": 2000
        },
        "unit": "μs",
        "purpose": "Minimum pulse width in microseconds"
      },
      "max_us": {
        "dataType": "Number",
        "default": 2500,
        "range": {
          "min": 2000,
          "max": 5000
        },
        "unit": "μs",
        "purpose": "Maximum pulse width in microseconds"
      },
      "angle_range": {
        "dataType": "Number",
        "default": 180,
        "range": {
          "min": 0,
          "max": 360
        },
        "unit": "°",
        "purpose": "Range of motion of the servo motor in degrees"
      },
      "_angle": {
        "dataType": "Number",
        "default": 0,
        "range": {
          "min": 0,
          "max": 180
        },
        "unit": "°",
        "access": "read-only",
        "purpose": "Current angle of the servo motor, ranging from 0° to 180°"
      },
      "_pulse_us": {
        "dataType": "Number",
        "default": 500,
        "unit": "μs",
        "access": "read-only",
        "purpose": "Current pulse width in microseconds corresponding to the angle"
      }
    },
    "methods": {
      "write_angle": {
        "returns": "void",
        "parameters": {
          "angle": {
            "dataType": "Number",
            "range": {
              "min": 0,
              "max": 180
            },
            "unit": "°",
            "purpose": "Sets the servo motor to a specific angle, from 0° to 180°"
          }
        },
        "purpose": "Sets the servo motor's angle by calculating the corresponding pulse width"
      },
      "write_us": {
        "returns": "void",
        "parameters": {
          "us": {
            "dataType": "Number",
            "range": {
              "min": 500,
              "max": 2500
            },
            "unit": "μs",
            "purpose": "Sets the servo motor's pulse width directly in microseconds"
          }
        },
        "purpose": "Sets the servo motor's pulse width directly in microseconds and updates the angle"
      },
      "get_state": {
        "returns": {
          "dataType": "Object",
          "properties": {
            "pin": {
              "dataType": "Number",
              "purpose": "GPIO pin the servo is connected to"
            },
            "angle": {
              "dataType": "Number",
              "unit": "°",
              "purpose": "Current angle of the servo motor"
            },
            "pulse_us": {
              "dataType": "Number",
              "unit": "μs",
              "purpose": "Current pulse width of the servo motor"
            }
          }
        },
        "purpose": "Returns the current state of the servo motor including pin, angle, and pulse width"
      },
      "deinit": {
        "returns": "void",
        "purpose": "Deinitializes the servo motor and releases resources"
      }
    }
  },
  {
    "name": "slide_switch",
    "library_name": "slide_switch",
    "class_name": "SlideSwitch",
    "attributes": {
      "pin": {
        "dataType": "Number",
        "purpose": "GPIO pin number connected to the slide switch"
      },
      "simulate": {
        "dataType": "Boolean",
        "default": true,
        "values_meaning": {
          "true": "Simulation mode enabled (state is manually set)",
          "false": "Reads actual hardware pin state"
        },
        "purpose": "Controls whether the switch operates in simulation or real mode"
      },
      "_state": {
        "dataType": "Boolean",
        "default": false,
        "access": "read-write",
        "values_meaning": {
          "true": "Switch is ON",
          "false": "Switch is OFF"
        },
        "purpose": "Internal switch state when in simulation mode"
      }
    },
    "methods": {
      "set_simulated_state": {
        "parameters": {
          "state": {
            "dataType": "Boolean",
            "values_meaning": {
              "true": "Simulates turning the switch ON",
              "false": "Simulates turning the switch OFF"
            }
          }
        },
        "returns": "void",
        "purpose": "Sets the internal state of the switch during simulation"
      },
      "read": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Switch is ON",
            "false": "Switch is OFF"
          }
        },
        "purpose": "Reads the current switch state (either simulated or from the actual pin)"
      },
      "state": {
        "returns": {
          "dataType": "Boolean",
          "values_meaning": {
            "true": "Switch is ON",
            "false": "Switch is OFF"
          }
        },
        "purpose": "Property alias for reading the switch state"
      }
    }
  }
]
